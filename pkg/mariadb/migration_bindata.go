// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../internal/mariadb/migrations/000001_bars.down.sql (27B)
// ../../internal/mariadb/migrations/000001_bars.up.sql (182B)

package mariadb

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _InternalMariadbMigrations000001_barsDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\x4a\x2c\x2a\xb6\xe6\x02\x04\x00\x00\xff\xff\x2f\x0b\xcf\xf4\x1b\x00\x00\x00")

func InternalMariadbMigrations000001_barsDownSqlBytes() ([]byte, error) {
	return bindataRead(
		_InternalMariadbMigrations000001_barsDownSql,
		"../../internal/mariadb/migrations/000001_bars.down.sql",
	)
}

func InternalMariadbMigrations000001_barsDownSql() (*asset, error) {
	bytes, err := InternalMariadbMigrations000001_barsDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../internal/mariadb/migrations/000001_bars.down.sql", size: 27, mode: os.FileMode(0644), modTime: time.Unix(1648131748, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7c, 0x44, 0x42, 0x55, 0x19, 0xc9, 0xee, 0x6a, 0xad, 0xbc, 0x3a, 0xea, 0xfd, 0x52, 0xa3, 0x8d, 0x39, 0x16, 0xc7, 0xe7, 0x67, 0x60, 0x77, 0x39, 0xc2, 0x9a, 0x71, 0x8c, 0x63, 0xab, 0xef, 0xf2}}
	return a, nil
}

var _InternalMariadbMigrations000001_barsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xcc\xb1\xae\x82\x40\x10\x46\xe1\x9e\xa7\xf8\x4b\x48\x6e\xc1\x35\xb1\xb2\x1a\x70\xd4\x89\xb0\x98\x61\x30\x52\x91\xd5\xdd\xc2\x42\x63\x10\xdf\xdf\x04\x3b\x13\xeb\xf3\xe5\x94\xca\x64\x0c\xa3\xa2\x62\xc8\x06\xae\x31\xf0\x49\x5a\x6b\x71\xf6\xe3\x13\x69\x02\x00\xd7\x80\x42\xb6\xe2\x2c\x5d\xe4\x19\xa8\xb3\x66\x10\x57\x2a\xd7\xec\x0c\x07\x95\x9a\xb4\xc7\x9e\xfb\xbf\x59\xdf\xfd\x2d\xe2\x48\x5a\xee\x48\xd3\xff\x65\x9e\xcd\x57\xd7\x55\xd5\xa7\x5f\xc6\xe8\xa7\x18\x06\x3f\x61\x4d\xc6\x26\x35\x7f\x89\xd7\x23\xfc\x14\x49\xb6\x4a\xde\x01\x00\x00\xff\xff\xca\xdb\xc6\x62\xb6\x00\x00\x00")

func InternalMariadbMigrations000001_barsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_InternalMariadbMigrations000001_barsUpSql,
		"../../internal/mariadb/migrations/000001_bars.up.sql",
	)
}

func InternalMariadbMigrations000001_barsUpSql() (*asset, error) {
	bytes, err := InternalMariadbMigrations000001_barsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../internal/mariadb/migrations/000001_bars.up.sql", size: 182, mode: os.FileMode(0644), modTime: time.Unix(1648131690, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x36, 0x99, 0x8a, 0x68, 0xbe, 0xf7, 0x5f, 0x12, 0x6, 0x9, 0xd1, 0x12, 0xf8, 0x59, 0xbf, 0xef, 0xa, 0x34, 0x98, 0x87, 0x53, 0x91, 0x58, 0xf4, 0xe9, 0x9a, 0x83, 0xe8, 0x27, 0xe6, 0x4d, 0x83}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../internal/mariadb/migrations/000001_bars.down.sql": InternalMariadbMigrations000001_barsDownSql,
	"../../internal/mariadb/migrations/000001_bars.up.sql":   InternalMariadbMigrations000001_barsUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": {nil, map[string]*bintree{
		"..": {nil, map[string]*bintree{
			"internal": {nil, map[string]*bintree{
				"mariadb": {nil, map[string]*bintree{
					"migrations": {nil, map[string]*bintree{
						"000001_bars.down.sql": {InternalMariadbMigrations000001_barsDownSql, map[string]*bintree{}},
						"000001_bars.up.sql": {InternalMariadbMigrations000001_barsUpSql, map[string]*bintree{}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
